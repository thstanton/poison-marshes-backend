generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  confirmed Boolean  @default(false)
  account   Account?
  accountId Int?
}

model Account {
  id            Int            @id @default(autoincrement())
  name          String
  password      String
  isAdmin       Boolean        @default(false)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int            @unique
  game          Game?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
}

model Game {
  id        Int      @id @default(autoincrement())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId Int      @unique
  level     Level    @relation(fields: [levelId], references: [id])
  levelId   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Level {
  id             Int              @id @default(autoincrement())
  sequence       Int
  name           String
  flavourText    String
  task           String
  solution       String
  hints          String[]
  email          Email?
  videoId        String?
  linkUrl        String?
  games          Game[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  act            Act              @relation(fields: [actSequence], references: [sequence], onDelete: Cascade, onUpdate: Cascade)
  actSequence    Int
  ScheduledEmail ScheduledEmail[]

  @@unique([sequence, actSequence])
}

model Act {
  id              Int      @id @default(autoincrement())
  sequence        Int      @unique
  name            String
  startDate       DateTime
  inProgress      Boolean  @default(false)
  preStartMessage String?
  endEmail        Email?   @relation(fields: [emailId], references: [id])
  levels          Level[]
  emailId         Int?
}

model Email {
  id        Int      @id @default(autoincrement())
  from      String
  subject   String
  text      String
  html      String
  level     Level?   @relation(fields: [levelId], references: [id])
  levelId   Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Act       Act[]
}

model ScheduledEmail {
  id           Int      @id @default(autoincrement())
  to           String
  levelId      Int
  level        Level    @relation(fields: [levelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduledFor DateTime
  sent         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId Int
  createdAt DateTime @default(now())
}
